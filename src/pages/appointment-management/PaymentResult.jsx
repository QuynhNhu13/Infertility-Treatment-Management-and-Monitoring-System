import { useEffect, useState } from "react";
import { useSearchParams } from "react-router-dom";
import "../../styles/appointment-management/PaymentResult.css";
import Header from "../../components/Header.jsx";
import Navbar from "../../components/Navbar.jsx";
import Footer from "../../components/Footer.jsx";
import { useNavigate } from "react-router-dom";
import { PAYMENT_VNPAY_CALLBACK, CONFIRM_APPOINTMENT, PAYMENT_VNPAY } from "../../api/apiUrls";

export default function PaymentResult() {
    const [status, setStatus] = useState("loading");
    const [searchParams] = useSearchParams();
    const navigate = useNavigate();
    const amount = 300000;
    const bankCode = "VNBANK";
    useEffect(() => {
        const checkPaymentResult = async () => {
            const token = localStorage.getItem("token");
            const appointmentPending = localStorage.getItem("appointmentPending");

            // if (!appointmentPending) {
            //     setStatus("invalid");
            //     return;
            // }

            try {
                const searchParams = new URLSearchParams(window.location.search);

                const res = await fetch(`${PAYMENT_VNPAY_CALLBACK}?${searchParams.toString()}`, {
                    method: "GET",
                    // headers: {
                    //     "Authorization": `Bearer ${token}`
                    // }
                });

                if (!res.ok) throw new Error("L·ªói khi x√°c th·ª±c k·∫øt qu·∫£ thanh to√°n");

                const data = await res.json();
                const paymentCode = data.data.code;
                const date = localStorage.getItem("selectedDate")
                console.log(paymentCode);
                if (paymentCode === "00") {
                    // const confirmRes = await fetch(`${CONFIRM_APPOINTMENT}?date=${date}`, {
                    //     method: "PUT",
                    //     headers: {
                    //         // "Authorization": `Bearer ${token}`,
                    //         "Content-Type": "application/json"
                    //     }
                    // });

                    // if (!confirmRes.ok) throw new Error("L·ªói khi x√°c nh·∫≠n l·ªãch kh√°m");

                    setStatus("success");
                    localStorage.removeItem("appointmentPending");
                } else {
                    setStatus("failure");
                }
            } catch (error) {
                console.error("error");
                setStatus("error");
            }
        };

        checkPaymentResult();
    }, [searchParams]);

    const thanhToanLai = async () => {
        // e.preventDefault();
        const token = localStorage.getItem("token");
        const res = await fetch(`${PAYMENT_VNPAY}?amount=${amount}&vnp_BankCode=${bankCode}`, {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        })

        if (!res.ok) {
            throw new Error("L·ªói khi g·ªçi API thanh to√°n l·∫°i")
        } else {
            const data = await res.json();
            window.location.href = data.data.paymentUrl;
        }

    }
    return (
        <>
            <Header />
            <Navbar />
            <div className="payment-result-layout">
                {status === "success" && (
                    <div className="payment-result-success">
                        <div className="payment-result-title">
                            <h1>ƒêƒÇNG K√ù KH√ÅM B·ªÜNH TH√ÄNH C√îNG</h1>
                        </div>

                        <div className="payment-result-info-box">
                            <div className="payment-result-info">
                                <p><b>K√≠nh g·ª≠i Qu√Ω kh√°ch</b><br />
                                    H·ªá th·ªëng B·ªánh vi·ªán ƒêa khoa Th√†nh Nh√¢n c·∫£m ∆°n qu√Ω kh√°ch ƒë√£ g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·ªãch kh√°m th√¥ng qua trang website c·ªßa b·ªánh vi·ªán.<br /><br />
                                    Y√™u c·∫ßu c·ªßa qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn b·ªô ph·∫≠n T·ªïng ƒë√†i, v√† ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi qu√Ω kh√°ch theo s·ªë ƒëi·ªán tho·∫°i 0123456789 ƒë·ªÉ x√°c nh·∫≠n l·ªãch h·∫πn.<br /><br />
                                    Tr∆∞·ªùng h·ª£p qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ th√™m, xin vui l√≤ng li√™n h·ªá ƒë·∫øn s·ªë hotline:<br />
                                    <b>B·ªánh vi·ªán ƒêa khoa Th√†nh Nh√¢n TP. HCM: 123-456-7890 <br /><br />
                                        Tr√¢n tr·ªçng c·∫£m ∆°n!</b>
                                </p>
                            </div>
                            <br /><br />
                            <div className="payment-result-buttons">
                                <button onClick={() => navigate("/")}>TRANG CH·ª¶</button>
                            </div>
                        </div>
                    </div>
                )}

                {status === "failure" && (
                    <div className="payment-result-failure">
                        <div className="payment-result-title">
                            <h1>THANH TO√ÅN TH·∫§T B·∫†I.</h1>
                        </div>
                        <div className="payment-result-buttons">
                            <button onClick={thanhToanLai}>THANH TO√ÅN L·∫†I</button>
                        </div>
                    </div>
                )}

                <div className="payment-result-container">
                    {status === "loading" && <p>üîÑ ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n...</p>}
                    {status === "invalid" && <div className="payment-result-error"> Kh√¥ng t√¨m th·∫•y l·ªãch thanh to√°n ƒëang ch·ªù.</div>}
                    {status === "error" && <div className="payment-result-error"> C√≥ l·ªói x·∫£y ra khi x√°c minh k·∫øt qu·∫£ thanh to√°n.</div>}
                </div>
            </div>


            <Footer />
        </>

    );
}
